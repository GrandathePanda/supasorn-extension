node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "IsVariableInitialized"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read"
  op: "Identity"
  input: "cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_1"
  input: "cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "cond/Merge"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_inputs/Placeholder"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63273
          }
          dim {
            size: 100
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 63273
        }
        dim {
          size: 100
        }
        dim {
          size: 28
        }
      }
    }
  }
}
node {
  name: "train_inputs/Placeholder_1"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 63273
          }
          dim {
            size: 100
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 63273
        }
        dim {
          size: 100
        }
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "train_inputs/count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "train_inputs/buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "train_inputs/seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "train_inputs/seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "train_inputs/Iterator"
  op: "Iterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_inputs/TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "train_inputs/Placeholder"
  input: "train_inputs/Placeholder_1"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_inputs/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 100
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "train_inputs/RepeatDataset"
  op: "RepeatDataset"
  input: "train_inputs/TensorSliceDataset"
  input: "train_inputs/count"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_inputs/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 100
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "train_inputs/BatchDataset/batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_inputs/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 20
      }
    }
  }
}
node {
  name: "train_inputs/BatchDataset"
  op: "BatchDataset"
  input: "train_inputs/RepeatDataset"
  input: "train_inputs/BatchDataset/batch_size"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_inputs/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "train_inputs/ShuffleDataset"
  op: "ShuffleDataset"
  input: "train_inputs/BatchDataset"
  input: "train_inputs/buffer_size"
  input: "train_inputs/seed"
  input: "train_inputs/seed2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_inputs/Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "train_inputs/MakeIterator"
  op: "MakeIterator"
  input: "train_inputs/ShuffleDataset"
  input: "train_inputs/Iterator"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_inputs/Iterator"
      }
    }
  }
}
node {
  name: "train_inputs/IteratorGetNext"
  op: "IteratorGetNext"
  input: "train_inputs/Iterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 100
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperInit/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.699999988079071
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperInit/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperInit/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.699999988079071
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/range"
  op: "Range"
  input: "Translate/TrainingHelper/range/start"
  input: "Translate/TrainingHelper/Rank"
  input: "Translate/TrainingHelper/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/concat"
  op: "ConcatV2"
  input: "Translate/TrainingHelper/concat/values_0"
  input: "Translate/TrainingHelper/range"
  input: "Translate/TrainingHelper/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/transpose"
  op: "Transpose"
  input: "train_inputs/IteratorGetNext"
  input: "Translate/TrainingHelper/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/Shape"
  op: "Shape"
  input: "Translate/TrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Translate/TrainingHelper/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/strided_slice"
  op: "StridedSlice"
  input: "Translate/TrainingHelper/Shape"
  input: "Translate/TrainingHelper/strided_slice/stack"
  input: "Translate/TrainingHelper/strided_slice/stack_1"
  input: "Translate/TrainingHelper/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArray"
  op: "TensorArrayV3"
  input: "Translate/TrainingHelper/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "Translate/TrainingHelper/transpose"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "Translate/TrainingHelper/TensorArrayUnstack/Shape"
  input: "Translate/TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  input: "Translate/TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  input: "Translate/TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/range"
  op: "Range"
  input: "Translate/TrainingHelper/TensorArrayUnstack/range/start"
  input: "Translate/TrainingHelper/TensorArrayUnstack/strided_slice"
  input: "Translate/TrainingHelper/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Translate/TrainingHelper/TensorArray"
  input: "Translate/TrainingHelper/TensorArrayUnstack/range"
  input: "Translate/TrainingHelper/transpose"
  input: "Translate/TrainingHelper/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/sequence_length"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/strided_slice_1/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/strided_slice_1/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/strided_slice_1/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/strided_slice_1"
  op: "StridedSlice"
  input: "Translate/TrainingHelper/transpose"
  input: "Translate/TrainingHelper/strided_slice_1/stack"
  input: "Translate/TrainingHelper/strided_slice_1/stack_1"
  input: "Translate/TrainingHelper/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Translate/TrainingHelper/zeros_like"
  op: "ZerosLike"
  input: "Translate/TrainingHelper/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/Size/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/TrainingHelper/Size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "Translate/decoder/maximum_iterations"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/Equal/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/Equal"
  op: "Equal"
  input: "Translate/decoder/TrainingHelperInitialize/Equal/x"
  input: "Translate/TrainingHelper/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/All"
  op: "All"
  input: "Translate/decoder/TrainingHelperInitialize/Equal"
  input: "Translate/decoder/TrainingHelperInitialize/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/Switch"
  op: "Switch"
  input: "Translate/decoder/TrainingHelperInitialize/All"
  input: "Translate/decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/switch_t"
  op: "Identity"
  input: "Translate/decoder/TrainingHelperInitialize/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/switch_f"
  op: "Identity"
  input: "Translate/decoder/TrainingHelperInitialize/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/pred_id"
  op: "Identity"
  input: "Translate/decoder/TrainingHelperInitialize/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/Switch_1"
  op: "Switch"
  input: "Translate/TrainingHelper/zeros_like"
  input: "Translate/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/TrainingHelper/zeros_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  op: "Const"
  input: "^add"
  input: "^Translate/decoder/TrainingHelperInitialize/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "Translate/TrainingHelper/TensorArray"
  input: "Translate/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "Translate/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "Translate/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "Translate/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "Translate/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "Translate/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Translate/decoder/TrainingHelperInitialize/cond/Merge"
  op: "Merge"
  input: "Translate/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  input: "Translate/decoder/TrainingHelperInitialize/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/zero_suffix_shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 30
      }
    }
  }
}
node {
  name: "Translate/decoder/concat/values_0"
  op: "Pack"
  input: "Translate/TrainingHelper/Size"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Translate/decoder/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/concat"
  op: "ConcatV2"
  input: "Translate/decoder/concat/values_0"
  input: "Translate/decoder/zero_suffix_shape"
  input: "Translate/decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Translate/decoder/zeros"
  op: "Fill"
  input: "Translate/decoder/concat"
  input: "Translate/decoder/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/zero_suffix_shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/concat_1/values_0"
  op: "Pack"
  input: "Translate/TrainingHelper/Size"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Translate/decoder/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/concat_1"
  op: "ConcatV2"
  input: "Translate/decoder/concat_1/values_0"
  input: "Translate/decoder/zero_suffix_shape_1"
  input: "Translate/decoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/zeros_1"
  op: "Fill"
  input: "Translate/decoder/concat_1"
  input: "Translate/decoder/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/LessEqual/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/LessEqual"
  op: "LessEqual"
  input: "Translate/decoder/maximum_iterations"
  input: "Translate/decoder/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/LogicalOr"
  op: "LogicalOr"
  input: "Translate/decoder/TrainingHelperInitialize/Equal"
  input: "Translate/decoder/LessEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/zeros_like"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 20
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArray/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArray"
  op: "TensorArrayV3"
  input: "Translate/decoder/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Translate/decoder/TensorArray_1/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArray_1"
  op: "TensorArrayV3"
  input: "Translate/decoder/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Translate/decoder/while/Enter"
  op: "Enter"
  input: "Translate/decoder/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Enter_1"
  op: "Enter"
  input: "Translate/decoder/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Enter_2"
  op: "Enter"
  input: "Translate/decoder/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Enter_3"
  op: "Enter"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Enter_4"
  op: "Enter"
  input: "Translate/DropoutWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Enter_5"
  op: "Enter"
  input: "Translate/decoder/TrainingHelperInitialize/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Enter_6"
  op: "Enter"
  input: "Translate/decoder/LogicalOr"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Enter_7"
  op: "Enter"
  input: "Translate/decoder/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Merge"
  op: "Merge"
  input: "Translate/decoder/while/Enter"
  input: "Translate/decoder/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Merge_1"
  op: "Merge"
  input: "Translate/decoder/while/Enter_1"
  input: "Translate/decoder/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Merge_2"
  op: "Merge"
  input: "Translate/decoder/while/Enter_2"
  input: "Translate/decoder/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Merge_3"
  op: "Merge"
  input: "Translate/decoder/while/Enter_3"
  input: "Translate/decoder/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Merge_4"
  op: "Merge"
  input: "Translate/decoder/while/Enter_4"
  input: "Translate/decoder/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Merge_5"
  op: "Merge"
  input: "Translate/decoder/while/Enter_5"
  input: "Translate/decoder/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Merge_6"
  op: "Merge"
  input: "Translate/decoder/while/Enter_6"
  input: "Translate/decoder/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Merge_7"
  op: "Merge"
  input: "Translate/decoder/while/Enter_7"
  input: "Translate/decoder/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Const"
  op: "Const"
  input: "^Translate/decoder/while/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/while/All"
  op: "All"
  input: "Translate/decoder/while/Merge_6"
  input: "Translate/decoder/while/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Translate/decoder/while/LogicalNot"
  op: "LogicalNot"
  input: "Translate/decoder/while/All"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/LoopCond"
  op: "LoopCond"
  input: "Translate/decoder/while/LogicalNot"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Switch"
  op: "Switch"
  input: "Translate/decoder/while/Merge"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Switch_1"
  op: "Switch"
  input: "Translate/decoder/while/Merge_1"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Switch_2"
  op: "Switch"
  input: "Translate/decoder/while/Merge_2"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Switch_3"
  op: "Switch"
  input: "Translate/decoder/while/Merge_3"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Switch_4"
  op: "Switch"
  input: "Translate/decoder/while/Merge_4"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Switch_5"
  op: "Switch"
  input: "Translate/decoder/while/Merge_5"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Switch_6"
  op: "Switch"
  input: "Translate/decoder/while/Merge_6"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Switch_7"
  op: "Switch"
  input: "Translate/decoder/while/Merge_7"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Identity"
  op: "Identity"
  input: "Translate/decoder/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Identity_1"
  op: "Identity"
  input: "Translate/decoder/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Identity_2"
  op: "Identity"
  input: "Translate/decoder/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Identity_3"
  op: "Identity"
  input: "Translate/decoder/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Identity_4"
  op: "Identity"
  input: "Translate/decoder/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Identity_5"
  op: "Identity"
  input: "Translate/decoder/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Identity_6"
  op: "Identity"
  input: "Translate/decoder/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Identity_7"
  op: "Identity"
  input: "Translate/decoder/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/keep_prob"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.699999988079071
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/Shape"
  op: "Shape"
  input: "Translate/decoder/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/min"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/max"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/sub"
  op: "Sub"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/max"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/mul"
  op: "Mul"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/RandomUniform"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform"
  op: "Add"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/mul"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/add"
  op: "Add"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/keep_prob"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/Floor"
  op: "Floor"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/div"
  op: "RealDiv"
  input: "Translate/decoder/while/Identity_5"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout/mul"
  op: "Mul"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/div"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ":\000\000\000x\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.18359701840863138
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.18359701840863138
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 58
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 120
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/mul"
  input: "Translate/decoder/while/Identity_4"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 58
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split/split_dim"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  op: "Add"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:2"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  op: "Mul"
  input: "Translate/decoder/while/Identity_3"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  op: "Add"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/keep_prob"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.699999988079071
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/Shape"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/min"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/max"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/sub"
  op: "Sub"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/max"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/mul"
  op: "Mul"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/RandomUniform"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform"
  op: "Add"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/mul"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/add"
  op: "Add"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/keep_prob"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/Floor"
  op: "Floor"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/div"
  op: "RealDiv"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/dropout_1/mul"
  op: "Mul"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/div"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/Floor"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax/dimension"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax"
  op: "ArgMax"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/mul"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
  op: "Cast"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add/y"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  op: "Add"
  input: "Translate/decoder/while/Identity"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual/Enter"
  op: "Enter"
  input: "Translate/TrainingHelper/sequence_length"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  op: "GreaterEqual"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/Const"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  op: "All"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch"
  op: "Switch"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/switch_t"
  op: "Identity"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/switch_f"
  op: "Identity"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  op: "Identity"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  op: "Enter"
  input: "Translate/TrainingHelper/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1"
  op: "Switch"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "Translate/TrainingHelper/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "Translate/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  op: "Switch"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge"
  op: "Merge"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/LogicalOr"
  op: "LogicalOr"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  input: "Translate/decoder/while/Identity_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/add/y"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/while/add"
  op: "Add"
  input: "Translate/decoder/while/Identity"
  input: "Translate/decoder/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/GreaterEqual/Enter"
  op: "Enter"
  input: "Translate/decoder/maximum_iterations"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/GreaterEqual"
  op: "GreaterEqual"
  input: "Translate/decoder/while/add"
  input: "Translate/decoder/while/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/LogicalOr_1"
  op: "LogicalOr"
  input: "Translate/decoder/while/LogicalOr"
  input: "Translate/decoder/while/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/LogicalNot_1"
  op: "LogicalNot"
  input: "Translate/decoder/while/Identity_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/LogicalAnd"
  op: "LogicalAnd"
  input: "Translate/decoder/while/LogicalNot_1"
  input: "Translate/decoder/while/LogicalOr_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Shape"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Translate/decoder/while/add_1/y"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/while/add_1"
  op: "Add"
  input: "Translate/decoder/while/Identity"
  input: "Translate/decoder/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Fill"
  op: "Fill"
  input: "Translate/decoder/while/Shape"
  input: "Translate/decoder/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Select"
  op: "Select"
  input: "Translate/decoder/while/LogicalAnd"
  input: "Translate/decoder/while/Fill"
  input: "Translate/decoder/while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Select_1/Enter"
  op: "Enter"
  input: "Translate/decoder/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Select_1"
  op: "Select"
  input: "Translate/decoder/while/Identity_6"
  input: "Translate/decoder/while/Select_1/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Select_2/Enter"
  op: "Enter"
  input: "Translate/decoder/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/Select_2"
  op: "Select"
  input: "Translate/decoder/while/Identity_6"
  input: "Translate/decoder/while/Select_2/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Select_3"
  op: "Select"
  input: "Translate/decoder/while/Identity_6"
  input: "Translate/decoder/while/Identity_3"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Select_4"
  op: "Select"
  input: "Translate/decoder/while/Identity_6"
  input: "Translate/decoder/while/Identity_4"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Translate/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "Translate/decoder/while/Identity"
  input: "Translate/decoder/while/Select_1"
  input: "Translate/decoder/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Translate/decoder/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Select_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Translate/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Translate/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "Translate/decoder/while/Identity"
  input: "Translate/decoder/while/Select_2"
  input: "Translate/decoder/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Select_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/add_2/y"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/while/add_2"
  op: "Add"
  input: "Translate/decoder/while/Identity"
  input: "Translate/decoder/while/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/NextIteration"
  op: "NextIteration"
  input: "Translate/decoder/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/NextIteration_1"
  op: "NextIteration"
  input: "Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/NextIteration_2"
  op: "NextIteration"
  input: "Translate/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/NextIteration_3"
  op: "NextIteration"
  input: "Translate/decoder/while/Select_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/NextIteration_4"
  op: "NextIteration"
  input: "Translate/decoder/while/Select_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/NextIteration_5"
  op: "NextIteration"
  input: "Translate/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/NextIteration_6"
  op: "NextIteration"
  input: "Translate/decoder/while/LogicalOr_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/NextIteration_7"
  op: "NextIteration"
  input: "Translate/decoder/while/Select"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Exit"
  op: "Exit"
  input: "Translate/decoder/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Exit_1"
  op: "Exit"
  input: "Translate/decoder/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Exit_2"
  op: "Exit"
  input: "Translate/decoder/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Exit_3"
  op: "Exit"
  input: "Translate/decoder/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Exit_4"
  op: "Exit"
  input: "Translate/decoder/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Exit_5"
  op: "Exit"
  input: "Translate/decoder/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Exit_6"
  op: "Exit"
  input: "Translate/decoder/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/while/Exit_7"
  op: "Exit"
  input: "Translate/decoder/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Translate/decoder/TensorArray"
  input: "Translate/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack/range"
  op: "Range"
  input: "Translate/decoder/TensorArrayStack/range/start"
  input: "Translate/decoder/TensorArrayStack/TensorArraySizeV3"
  input: "Translate/decoder/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Translate/decoder/TensorArray"
  input: "Translate/decoder/TensorArrayStack/range"
  input: "Translate/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Translate/decoder/TensorArray_1"
  input: "Translate/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack_1/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack_1/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack_1/range"
  op: "Range"
  input: "Translate/decoder/TensorArrayStack_1/range/start"
  input: "Translate/decoder/TensorArrayStack_1/TensorArraySizeV3"
  input: "Translate/decoder/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Translate/decoder/TensorArray_1"
  input: "Translate/decoder/TensorArrayStack_1/range"
  input: "Translate/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Translate/decoder/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Translate/decoder/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/range"
  op: "Range"
  input: "Translate/decoder/range/start"
  input: "Translate/decoder/Rank"
  input: "Translate/decoder/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/concat_2/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/decoder/concat_2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/concat_2"
  op: "ConcatV2"
  input: "Translate/decoder/concat_2/values_0"
  input: "Translate/decoder/range"
  input: "Translate/decoder/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/transpose"
  op: "Transpose"
  input: "Translate/decoder/TensorArrayStack/TensorArrayGatherV3"
  input: "Translate/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/Rank_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Translate/decoder/range_1/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Translate/decoder/range_1/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Translate/decoder/range_1"
  op: "Range"
  input: "Translate/decoder/range_1/start"
  input: "Translate/decoder/Rank_1"
  input: "Translate/decoder/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/concat_3/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Translate/decoder/concat_3/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Translate/decoder/concat_3"
  op: "ConcatV2"
  input: "Translate/decoder/concat_3/values_0"
  input: "Translate/decoder/range_1"
  input: "Translate/decoder/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Translate/decoder/transpose_1"
  op: "Transpose"
  input: "Translate/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  input: "Translate/decoder/concat_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_w/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_w/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.34641016151377546
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_w/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.34641016151377546
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_w/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Weights_Intersect/output_w/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Weights_Intersect/output_w/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Weights_Intersect/output_w/Initializer/random_uniform/max"
  input: "Weights_Intersect/output_w/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_w/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Weights_Intersect/output_w/Initializer/random_uniform/RandomUniform"
  input: "Weights_Intersect/output_w/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_w/Initializer/random_uniform"
  op: "Add"
  input: "Weights_Intersect/output_w/Initializer/random_uniform/mul"
  input: "Weights_Intersect/output_w/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_w"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Weights_Intersect/output_w/Assign"
  op: "Assign"
  input: "Weights_Intersect/output_w"
  input: "Weights_Intersect/output_w/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Weights_Intersect/output_w/read"
  op: "Identity"
  input: "Weights_Intersect/output_w"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_b/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_b/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: -0.3872983346207417
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_b/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.3872983346207417
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_b/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Weights_Intersect/output_b/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "Weights_Intersect/output_b/Initializer/random_uniform/sub"
  op: "Sub"
  input: "Weights_Intersect/output_b/Initializer/random_uniform/max"
  input: "Weights_Intersect/output_b/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_b/Initializer/random_uniform/mul"
  op: "Mul"
  input: "Weights_Intersect/output_b/Initializer/random_uniform/RandomUniform"
  input: "Weights_Intersect/output_b/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_b/Initializer/random_uniform"
  op: "Add"
  input: "Weights_Intersect/output_b/Initializer/random_uniform/mul"
  input: "Weights_Intersect/output_b/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Weights_Intersect/output_b"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Weights_Intersect/output_b/Assign"
  op: "Assign"
  input: "Weights_Intersect/output_b"
  input: "Weights_Intersect/output_b/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Weights_Intersect/output_b/read"
  op: "Identity"
  input: "Weights_Intersect/output_b"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "concat/concat_dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat"
  op: "Identity"
  input: "Translate/decoder/transpose"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\036\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "concat"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "xw_plus_b/MatMul"
  op: "MatMul"
  input: "Reshape"
  input: "Weights_Intersect/output_w/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "xw_plus_b"
  op: "BiasAdd"
  input: "xw_plus_b/MatMul"
  input: "Weights_Intersect/output_b/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "train_inputs/IteratorGetNext:1"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "SquaredDifference"
  op: "SquaredDifference"
  input: "xw_plus_b"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "SquaredDifference"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "truediv/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 40000.0
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "Sum"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00033000000985339284
      }
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/Assign"
  op: "Assign"
  input: "OptimizeLoss/learning_rate"
  input: "OptimizeLoss/learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/learning_rate/read"
  op: "Identity"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Fill"
  op: "Fill"
  input: "OptimizeLoss/gradients/Shape"
  input: "OptimizeLoss/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge"
  op: "Merge"
  input: "OptimizeLoss/gradients/f_count_1"
  input: "OptimizeLoss/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge"
  input: "Translate/decoder/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add/y"
  op: "Const"
  input: "^Translate/decoder/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/Switch:1"
  input: "OptimizeLoss/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Add"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/f_count_2"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Merge_1"
  op: "Merge"
  input: "OptimizeLoss/gradients/b_count_1"
  input: "OptimizeLoss/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "OptimizeLoss/gradients/Merge_1"
  input: "OptimizeLoss/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_2"
  op: "LoopCond"
  input: "OptimizeLoss/gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Switch_1"
  op: "Switch"
  input: "OptimizeLoss/gradients/Merge_1"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sub"
  op: "Sub"
  input: "OptimizeLoss/gradients/Switch_1:1"
  input: "OptimizeLoss/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/NextIteration_1"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Sub"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/b_count_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/truediv_grad/Shape"
  input: "OptimizeLoss/gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/Fill"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/truediv_grad/RealDiv"
  input: "OptimizeLoss/gradients/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/truediv_grad/Sum"
  input: "OptimizeLoss/gradients/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/Neg"
  op: "Neg"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/truediv_grad/Neg"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/truediv_grad/RealDiv_1"
  input: "truediv/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/Fill"
  input: "OptimizeLoss/gradients/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/truediv_grad/mul"
  input: "OptimizeLoss/gradients/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/truediv_grad/Sum_1"
  input: "OptimizeLoss/gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/truediv_grad/Reshape"
  input: "^OptimizeLoss/gradients/truediv_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/truediv_grad/Reshape"
  input: "^OptimizeLoss/gradients/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/truediv_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/truediv_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/truediv_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sum_grad/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sum_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/truediv_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sum_grad/Shape"
  op: "Shape"
  input: "SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Sum_grad/Tile"
  op: "Tile"
  input: "OptimizeLoss/gradients/Sum_grad/Reshape"
  input: "OptimizeLoss/gradients/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "xw_plus_b"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Shape"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^add"
  input: "^OptimizeLoss/gradients/Sum_grad/Tile"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 2.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/scalar"
  input: "OptimizeLoss/gradients/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/sub"
  op: "Sub"
  input: "xw_plus_b"
  input: "Reshape_1"
  input: "^OptimizeLoss/gradients/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/mul"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/mul_1"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Sum"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/mul_1"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Sum_1"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/SquaredDifference_grad/Reshape"
  input: "^OptimizeLoss/gradients/SquaredDifference_grad/Neg"
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Reshape"
  input: "^OptimizeLoss/gradients/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/Neg"
  input: "^OptimizeLoss/gradients/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/SquaredDifference_grad/tuple/control_dependency"
  input: "^OptimizeLoss/gradients/xw_plus_b_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/SquaredDifference_grad/tuple/control_dependency"
  input: "^OptimizeLoss/gradients/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/xw_plus_b_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/xw_plus_b_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/xw_plus_b_grad/tuple/control_dependency"
  input: "Weights_Intersect/output_w/read"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Reshape"
  input: "OptimizeLoss/gradients/xw_plus_b_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/xw_plus_b/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Reshape_grad/Shape"
  op: "Shape"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Reshape_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "Translate/decoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/transpose_grad/transpose"
  op: "Transpose"
  input: "OptimizeLoss/gradients/Reshape_grad/Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "Translate/decoder/TensorArray"
  input: "Translate/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "Translate/decoder/while/Exit_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "OptimizeLoss/gradients/Translate/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "Translate/decoder/TensorArrayStack/range"
  input: "OptimizeLoss/gradients/Translate/decoder/transpose_grad/transpose"
  input: "OptimizeLoss/gradients/Translate/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/zeros_like"
  op: "ZerosLike"
  input: "Translate/decoder/while/Exit_5"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "OptimizeLoss/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Exit_1_grad/b_exit"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Exit_3_grad/b_exit"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Exit_4_grad/b_exit"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Switch_1_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/Switch"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/Switch:1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Switch_3_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/Switch"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/Switch:1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Switch_4_grad/b_switch"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/Switch"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/Switch"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/Switch:1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "Translate/decoder/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "OptimizeLoss/gradients"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "Translate/decoder/while/Identity"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/zeros_like"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Identity_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/Enter"
  input: "Translate/decoder/while/Identity_6"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/zeros_like"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/zeros_like"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/zeros_like"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/Select"
  op: "Select"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/Select_1"
  op: "Select"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/zeros_like"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/Select_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/Select"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/Select_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Shape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/dropout_1/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/dropout_1/Floor"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/Floor"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/dropout_1/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/dropout_1/div"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/dropout_1/div"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Translate/decoder/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Shape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 0.699999988079071
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg"
  op: "Neg"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Neg"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/mul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Sum_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN"
  op: "AddN"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/dropout_1/div_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/AddN"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_1"
  op: "AddN"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/AddN_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "Translate/decoder/while/Identity_3"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Sum_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_2"
  op: "AddN"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_3_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Sum_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 58
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 58
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 120
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod/Const"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/BasicDecoderStep/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter"
  input: "Translate/decoder/while/BasicDecoderStep/dropout/mul"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc_1/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc_1/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Translate/decoder/while/Identity_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/Enter_1"
  input: "Translate/decoder/while/Identity_4"
  input: "^OptimizeLoss/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^OptimizeLoss/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/mod"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice_1"
  input: "^OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "OptimizeLoss/gradients/Translate/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "OptimizeLoss/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/AddN_3"
  op: "AddN"
  input: "OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/tuple/control_dependency"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/Select_4_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/gradients/Translate/decoder/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "OptimizeLoss/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "OptimizeLoss/gradients/xw_plus_b_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/stack"
  op: "Pack"
  input: "OptimizeLoss/global_norm/L2Loss"
  input: "OptimizeLoss/global_norm/L2Loss_1"
  input: "OptimizeLoss/global_norm/L2Loss_2"
  input: "OptimizeLoss/global_norm/L2Loss_3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/Sum"
  op: "Sum"
  input: "OptimizeLoss/global_norm/stack"
  input: "OptimizeLoss/global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 2.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/mul"
  op: "Mul"
  input: "OptimizeLoss/global_norm/Sum"
  input: "OptimizeLoss/global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/global_norm/global_norm"
  op: "Sqrt"
  input: "OptimizeLoss/global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/truediv/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "OptimizeLoss/clip_by_global_norm/truediv/x"
  input: "OptimizeLoss/global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 1.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/truediv_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 10.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "OptimizeLoss/clip_by_global_norm/Const"
  input: "OptimizeLoss/clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "OptimizeLoss/clip_by_global_norm/truediv"
  input: "OptimizeLoss/clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/mul/x"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
        }
        double_val: 10.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/mul"
  op: "Mul"
  input: "OptimizeLoss/clip_by_global_norm/mul/x"
  input: "OptimizeLoss/clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/mul_1"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  input: "OptimizeLoss/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/OptimizeLoss/clip_by_global_norm/_0"
  op: "Identity"
  input: "OptimizeLoss/clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/mul_2"
  op: "Mul"
  input: "OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  input: "OptimizeLoss/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/OptimizeLoss/clip_by_global_norm/_1"
  op: "Identity"
  input: "OptimizeLoss/clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/Translate/decoder/while/BasicDecoderStep/decoder/multi_rnn_cell/cell_0/cell_0/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/mul_3"
  op: "Mul"
  input: "OptimizeLoss/gradients/xw_plus_b/MatMul_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/OptimizeLoss/clip_by_global_norm/_2"
  op: "Identity"
  input: "OptimizeLoss/clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/mul_4"
  op: "Mul"
  input: "OptimizeLoss/gradients/xw_plus_b_grad/tuple/control_dependency_1"
  input: "OptimizeLoss/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/clip_by_global_norm/OptimizeLoss/clip_by_global_norm/_3"
  op: "Identity"
  input: "OptimizeLoss/clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/gradients/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "OptimizeLoss/loss"
      }
    }
  }
}
node {
  name: "OptimizeLoss/loss"
  op: "ScalarSummary"
  input: "OptimizeLoss/loss/tags"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/beta1_power/read"
  op: "Identity"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/beta2_power/read"
  op: "Identity"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 58
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 58
        }
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 120
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 120
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 120
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_w/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_w/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_w/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_w/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_w/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_w/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_w/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_b/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_b/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_b/Adam/Assign"
  op: "Assign"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_b/Adam/read"
  op: "Identity"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_b/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 20
          }
        }
        double_val: 0.0
      }
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_b/Adam_1/Assign"
  op: "Assign"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/Weights_Intersect/output_b/Adam_1/read"
  op: "Identity"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/beta1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/beta2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/epsilon"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast"
  op: "Cast"
  input: "OptimizeLoss/beta1_power/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_1"
  op: "Cast"
  input: "OptimizeLoss/beta2_power/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_2"
  op: "Cast"
  input: "OptimizeLoss/learning_rate/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_3"
  op: "Cast"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_4"
  op: "Cast"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_5"
  op: "Cast"
  input: "OptimizeLoss/train/epsilon"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_1"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_2"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_3"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_4"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Cast_5"
  input: "OptimizeLoss/clip_by_global_norm/OptimizeLoss/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast"
  op: "Cast"
  input: "OptimizeLoss/beta1_power/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_1"
  op: "Cast"
  input: "OptimizeLoss/beta2_power/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_2"
  op: "Cast"
  input: "OptimizeLoss/learning_rate/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_3"
  op: "Cast"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_4"
  op: "Cast"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_5"
  op: "Cast"
  input: "OptimizeLoss/train/epsilon"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_1"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_2"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_3"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_4"
  input: "OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Cast_5"
  input: "OptimizeLoss/clip_by_global_norm/OptimizeLoss/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast"
  op: "Cast"
  input: "OptimizeLoss/beta1_power/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_1"
  op: "Cast"
  input: "OptimizeLoss/beta2_power/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_2"
  op: "Cast"
  input: "OptimizeLoss/learning_rate/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_3"
  op: "Cast"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_4"
  op: "Cast"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_5"
  op: "Cast"
  input: "OptimizeLoss/train/epsilon"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_w/ApplyAdam"
  op: "ApplyAdam"
  input: "Weights_Intersect/output_w"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_1"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_2"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_3"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_4"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_w/Cast_5"
  input: "OptimizeLoss/clip_by_global_norm/OptimizeLoss/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast"
  op: "Cast"
  input: "OptimizeLoss/beta1_power/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_1"
  op: "Cast"
  input: "OptimizeLoss/beta2_power/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_2"
  op: "Cast"
  input: "OptimizeLoss/learning_rate/read"
  input: "^add"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_3"
  op: "Cast"
  input: "OptimizeLoss/train/beta1"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_4"
  op: "Cast"
  input: "OptimizeLoss/train/beta2"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_5"
  op: "Cast"
  input: "OptimizeLoss/train/epsilon"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/update_Weights_Intersect/output_b/ApplyAdam"
  op: "ApplyAdam"
  input: "Weights_Intersect/output_b"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_1"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_2"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_3"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_4"
  input: "OptimizeLoss/train/update_Weights_Intersect/output_b/Cast_5"
  input: "OptimizeLoss/clip_by_global_norm/OptimizeLoss/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/train/mul"
  op: "Mul"
  input: "OptimizeLoss/beta1_power/read"
  input: "OptimizeLoss/train/beta1"
  input: "^OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_Weights_Intersect/output_w/ApplyAdam"
  input: "^OptimizeLoss/train/update_Weights_Intersect/output_b/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/Assign"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/mul_1"
  op: "Mul"
  input: "OptimizeLoss/beta2_power/read"
  input: "OptimizeLoss/train/beta2"
  input: "^OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_Weights_Intersect/output_w/ApplyAdam"
  input: "^OptimizeLoss/train/update_Weights_Intersect/output_b/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "OptimizeLoss/train/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "OptimizeLoss/train/update"
  op: "NoOp"
  input: "^add"
  input: "^OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/ApplyAdam"
  input: "^OptimizeLoss/train/update_decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/ApplyAdam"
  input: "^OptimizeLoss/train/update_Weights_Intersect/output_w/ApplyAdam"
  input: "^OptimizeLoss/train/update_Weights_Intersect/output_b/ApplyAdam"
  input: "^OptimizeLoss/train/Assign"
  input: "^OptimizeLoss/train/Assign_1"
}
node {
  name: "OptimizeLoss/train/value"
  op: "Const"
  input: "^add"
  input: "^OptimizeLoss/train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "OptimizeLoss/train"
  op: "AssignAdd"
  input: "global_step"
  input: "OptimizeLoss/train/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "OptimizeLoss/control_dependency"
  op: "Identity"
  input: "truediv"
  input: "^OptimizeLoss/train"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  input: "^decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  input: "^Weights_Intersect/output_w/Assign"
  input: "^Weights_Intersect/output_b/Assign"
  input: "^OptimizeLoss/learning_rate/Assign"
  input: "^OptimizeLoss/beta1_power/Assign"
  input: "^OptimizeLoss/beta2_power/Assign"
  input: "^OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam/Assign"
  input: "^OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam/Assign"
  input: "^OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^OptimizeLoss/Weights_Intersect/output_w/Adam/Assign"
  input: "^OptimizeLoss/Weights_Intersect/output_w/Adam_1/Assign"
  input: "^OptimizeLoss/Weights_Intersect/output_b/Adam/Assign"
  input: "^OptimizeLoss/Weights_Intersect/output_b/Adam_1/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "Weights_Intersect/output_w"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "Weights_Intersect/output_b"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 16
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 16
          }
        }
        string_val: "global_step"
        string_val: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "Weights_Intersect/output_w"
        string_val: "Weights_Intersect/output_b"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/Weights_Intersect/output_w/Adam"
        string_val: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
        string_val: "OptimizeLoss/Weights_Intersect/output_b/Adam"
        string_val: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "Weights_Intersect/output_w"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "Weights_Intersect/output_b"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 16
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 16
          }
        }
        string_val: "global_step"
        string_val: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "Weights_Intersect/output_w"
        string_val: "Weights_Intersect/output_b"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/Weights_Intersect/output_w/Adam"
        string_val: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
        string_val: "OptimizeLoss/Weights_Intersect/output_b/Adam"
        string_val: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "OptimizeLoss/loss"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_b07e23fe66764b3693170659c72ccd06/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 16
          }
        }
        string_val: "OptimizeLoss/Weights_Intersect/output_b/Adam"
        string_val: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
        string_val: "OptimizeLoss/Weights_Intersect/output_w/Adam"
        string_val: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
        string_val: "OptimizeLoss/beta1_power"
        string_val: "OptimizeLoss/beta2_power"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
        string_val: "OptimizeLoss/learning_rate"
        string_val: "Weights_Intersect/output_b"
        string_val: "Weights_Intersect/output_w"
        string_val: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 16
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 16
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
  input: "OptimizeLoss/beta1_power"
  input: "OptimizeLoss/beta2_power"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "OptimizeLoss/learning_rate"
  input: "Weights_Intersect/output_b"
  input: "Weights_Intersect/output_w"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_FLOAT
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/MergeV2Checkpoints"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/Weights_Intersect/output_b/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "OptimizeLoss/Weights_Intersect/output_b/Adam_1"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/Weights_Intersect/output_w/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "OptimizeLoss/Weights_Intersect/output_w/Adam_1"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "OptimizeLoss/beta1_power"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "OptimizeLoss/beta2_power"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "OptimizeLoss/decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "OptimizeLoss/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "OptimizeLoss/learning_rate"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@OptimizeLoss/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Weights_Intersect/output_b"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "Weights_Intersect/output_b"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "Weights_Intersect/output_w"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "Weights_Intersect/output_w"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Weights_Intersect/output_w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 58
          }
          dim {
            size: 120
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 24
}
